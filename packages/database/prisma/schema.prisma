// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [vector]
}

// ==================== ENUMS ====================

enum MerchantStatus {
  PENDING_VERIFICATION
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum ProductStatus {
  DRAFT
  ACTIVE
  SOLD_OUT
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  PAYNOW
  CASH
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
  DINE_IN
}

enum NotificationType {
  ORDER_PLACED
  ORDER_CONFIRMED
  ORDER_PREPARING
  ORDER_READY
  ORDER_DELIVERED
  ORDER_CANCELLED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  REVIEW_RECEIVED
  LOW_STOCK_ALERT
  PROMOTION_STARTED
  PROMOTION_ENDING
  SYSTEM_MAINTENANCE
  ACCOUNT_VERIFICATION
  PASSWORD_RESET
}

enum SubscriptionTier {
  FREE
  STARTER // $29/month - 200 orders
  GROWTH // $79/month - 1000 orders
  PREMIUM // $199/month - unlimited
  ENTERPRISE // Custom pricing
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELLED
  PAUSED
}

enum InventoryLogType {
  ADJUSTMENT
  SALE
  RETURN
  EXPIRED
  RESTOCK
  DAMAGE
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  BOGO
  FREE_DELIVERY
  BUNDLE
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN
  LOGOUT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// ==================== MODELS ====================

model Merchant {
  id           String  @id @default(cuid())
  email        String  @unique
  phone        String  @unique
  businessName String
  slug         String  @unique
  description  String?
  logoUrl      String?
  bannerUrl    String?

  // Business Details
  businessType               String?
  businessRegistrationNumber String? // Singapore ACRA/UEN number
  cuisineType                String[] @default([])
  halal                      Boolean  @default(false)

  // Legal & Compliance
  licenseNumber       String? // SFA food license
  licenseExpiryDate   DateTime?
  insuranceExpiryDate DateTime?
  nric                String? // For individual sellers (encrypted)

  // Banking & Finance
  bankAccountName   String?
  bankAccountNumber String? // Encrypted
  bankName          String?
  gstRegistered     Boolean @default(false)
  gstNumber         String?

  // Contact & Social
  whatsappNumber  String?
  instagramHandle String?
  facebookPage    String?
  tiktokHandle    String?
  websiteUrl      String?

  // Address & Location
  address           String?
  postalCode        String? @db.VarChar(6)
  unitNumber        String? @db.VarChar(20)
  buildingName      String? @db.VarChar(255)
  country           String  @default("SG")
  latitude          Float?  @db.DoublePrecision
  longitude         Float?  @db.DoublePrecision
  showExactLocation Boolean @default(false)

  // Operating Hours (JSON)
  operatingHours Json? // { monday: { open: "09:00", close: "18:00" }, ... }
  holidayDates   DateTime[] // Dates when closed

  // Delivery Settings
  deliverySettings Json?    @default("{\"pricingModel\":\"FLAT\"}") // Flexible delivery pricing configuration
  deliveryEnabled  Boolean  @default(true)
  pickupEnabled    Boolean  @default(true)
  dineInEnabled    Boolean  @default(false)
  deliveryFee      Decimal  @default(0) @db.Decimal(10, 2)
  minimumOrder     Decimal  @default(0) @db.Decimal(10, 2)
  deliveryRadius   Int      @default(5) // in km
  preparationTime  Int      @default(30) // default prep time in minutes
  deliveryAreas    String[] // Specific areas served

  // Payment Settings
  paymentMethods PaymentMethod[] @default([PAYNOW, CASH])
  paynowNumber   String?
  paynowQrCode   String?

  // Subscription & Billing
  subscriptionTier      SubscriptionTier   @default(FREE)
  subscriptionStatus    SubscriptionStatus @default(TRIAL)
  subscriptionExpiresAt DateTime?
  monthlyOrderLimit     Int                @default(100)
  currentMonthOrders    Int                @default(0)
  trialEndsAt           DateTime?

  // Analytics & Performance
  averageRating       Decimal? @db.Decimal(2, 1)
  totalReviews        Int      @default(0)
  totalOrders         Int      @default(0)
  totalRevenue        Decimal  @default(0) @db.Decimal(12, 2)
  responseRate        Decimal? @db.Decimal(3, 2) // % of messages responded
  averageResponseTime Int? // in minutes
  completionRate      Decimal? @db.Decimal(3, 2) // % of orders completed

  // Merchant Preferences
  autoAcceptOrders       Boolean   @default(false)
  autoConfirmPayment     Boolean   @default(false)
  orderNotificationEmail String?
  orderNotificationPhone String?
  language               String    @default("en") // en, zh, ms, ta
  timezone               String    @default("Asia/Singapore")
  emailNotifications     Boolean   @default(true)
  smsNotifications       Boolean   @default(true)
  whatsappNotifications  Boolean   @default(true)
  whatsappOptedInAt      DateTime? // When user opted into WhatsApp
  whatsappOptedOutAt     DateTime? // When user opted out
  whatsappVerified       Boolean   @default(false) // Phone verified for WhatsApp

  // Security
  password            String
  twoFactorEnabled    Boolean   @default(false)
  twoFactorSecret     String?
  lastLoginAt         DateTime?
  lastLoginIp         String?
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  emailVerified       Boolean   @default(false)
  phoneVerified       Boolean   @default(false)

  // Status & Metadata
  status           MerchantStatus               @default(PENDING_VERIFICATION)
  verified         Boolean                      @default(false)
  verifiedAt       DateTime?
  verifiedBy       String? // Admin ID who verified
  suspensionReason String?
  settings         Json? // Flexible settings storage
  cachedStats      Json? // Revenue, orders, etc.
  statsUpdatedAt   DateTime?
  tags             String[] // For categorization
  searchVector     Unsupported("vector(1536)")? // For semantic search

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  categories        Category[]
  products          Product[]
  orders            Order[]
  reviews           Review[]
  sessions          Session[]
  notifications     Notification[]
  analytics         Analytics[]
  checkoutSessions  CheckoutSession[]
  subscription      Subscription?
  whatsappTemplates WhatsAppTemplate[]
  loyaltyProgram    LoyaltyProgram?
  customerLoyalty   CustomerLoyalty[]
  promotions        Promotion[]
  auditLogs         AuditLog[]
  merchantSettings  MerchantSettings?

  @@index([status, deletedAt])
  @@index([slug])
  @@index([email])
  @@index([phone])
  @@index([postalCode])
  @@index([cuisineType])
  @@index([averageRating])
}

model MerchantSettings {
  id         String @id @default(cuid())
  merchantId String @unique

  // Order Settings
  orderPrefix          String  @default("ORD")
  orderNumberFormat    String  @default("SEQUENTIAL") // SEQUENTIAL, RANDOM
  requireOrderApproval Boolean @default(true)
  maxAdvanceOrderDays  Int     @default(7)

  // Notification Templates
  orderConfirmationMessage String?
  orderReadyMessage        String?
  orderDeliveredMessage    String?

  // Display Settings
  showSoldOutItems    Boolean @default(true)
  showPreparationTime Boolean @default(true)
  showCalories        Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchant Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

model Category {
  id          String  @id @default(cuid())
  merchantId  String
  name        String
  slug        String
  description String?
  imageUrl    String?

  sortOrder Int     @default(0)
  isActive  Boolean @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  merchant Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([merchantId, slug])
  @@index([merchantId, isActive])
}

model Product {
  id          String   @id @default(cuid())
  merchantId  String
  categoryId  String?
  sku         String?
  name        String
  slug        String
  description String?
  images      String[] @default([])

  // Pricing
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2) // Original price for sale items
  cost           Decimal? @db.Decimal(10, 2) // Cost to merchant
  profitMargin   Decimal? @db.Decimal(5, 2)

  // Inventory Management
  trackInventory    Boolean @default(false)
  inventory         Int     @default(0)
  lowStockThreshold Int?
  allowBackorder    Boolean @default(false)

  // Status
  status    ProductStatus @default(DRAFT)
  featured  Boolean       @default(false)
  sortOrder Int           @default(0)

  // Food Specific Info
  allergens     String[] // ["nuts", "dairy", "gluten", "shellfish", etc.]
  dietaryInfo   String[] // ["vegetarian", "vegan", "halal", "keto", etc.]
  spiceLevel    Int? // 0-5
  servingSize   String? // "Serves 2-3"
  calories      Int?
  nutritionInfo Json? // Detailed nutrition facts
  ingredients   String[] // List of ingredients

  // Preparation & Storage
  preparationTime       Int? // Override merchant default (minutes)
  preparationMethod     String? // "Baked fresh", "Pre-made", etc.
  shelfLife             String? // "Best consumed within 3 days"
  storageInstructions   String? // "Keep refrigerated"
  reheatingInstructions String? // "Microwave for 2 mins"

  // Scheduling & Availability
  availableDays      Int[]      @default([0, 1, 2, 3, 4, 5, 6]) // 0=Sun, 6=Sat
  availableTimeSlots Json? // { "monday": ["09:00-12:00", "14:00-18:00"] }
  blackoutDates      DateTime[] // Specific dates not available
  maxDailyQuantity   Int?
  maxPerOrder        Int?
  minPerOrder        Int        @default(1)
  requirePreorder    Boolean    @default(false)
  preorderDays       Int? // Days in advance required

  // SEO
  metaTitle       String?
  metaDescription String?

  // Analytics
  viewCount       Int       @default(0)
  orderCount      Int       @default(0)
  lastOrderedAt   DateTime?
  popularityScore Int       @default(0) // Calculated based on views, orders, etc.
  conversionRate  Decimal?  @db.Decimal(5, 2) // % of views that convert

  // Metadata
  tags         String[]                     @default([])
  customFields Json? // Flexible fields
  searchVector Unsupported("vector(1536)")? // For semantic search

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  publishedAt   DateTime?
  deletedAt     DateTime?
  availableFrom DateTime?
  availableTo   DateTime?

  // Relations
  merchant      Merchant         @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  category      Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orderItems    OrderItem[]
  reviews       Review[]
  variants      ProductVariant[]
  views         ProductView[]
  inventoryLogs InventoryLog[]
  promotions    String[] // Promotion IDs this product is eligible for

  @@unique([merchantId, slug])
  @@unique([merchantId, sku])
  @@index([merchantId, status, deletedAt])
  @@index([categoryId, status, deletedAt])
  @@index([featured, status, deletedAt])
  @@index([name])
  @@index([tags])
  @@index([popularityScore])
}

model ProductVariant {
  id              String  @id @default(cuid())
  productId       String
  sku             String?
  name            String // "Large", "Spicy", "Large + Spicy"
  options         Json // { size: "L", spiceLevel: "Hot" }
  priceAdjustment Decimal @default(0) @db.Decimal(10, 2)
  inventory       Int     @default(0)
  isDefault       Boolean @default(false)
  sortOrder       Int     @default(0)
  imageUrl        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, sku])
  @@index([productId])
}

model ProductView {
  id         String   @id @default(cuid())
  productId  String
  customerId String?
  sessionId  String?
  source     String? // "web", "qr", "social"
  referrer   String?
  viewedAt   DateTime @default(now())

  product  Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id])

  @@index([productId, viewedAt])
  @@index([customerId])
}

model Customer {
  id    String  @id @default(cuid())
  email String? @unique
  phone String  @unique
  name  String

  // Profile
  dateOfBirth   DateTime?
  avatarUrl     String?
  preferredName String?

  // Preferences
  emailVerified      Boolean  @default(false)
  phoneVerified      Boolean  @default(false)
  marketingOptIn     Boolean  @default(false)
  language           String   @default("en")
  dietaryPreferences String[] // ["vegetarian", "no-nuts", etc.]

  // Notification Preferences
  emailNotifications     Boolean @default(true)
  smsNotifications       Boolean @default(true)
  whatsappNotifications  Boolean @default(true)
  orderNotificationEmail String?
  orderNotificationPhone String?

  // Favorites & History
  merchantFavorites String[] // Merchant IDs
  productFavorites  String[] // Product IDs
  searchHistory     Json? // Recent searches with timestamps

  // Loyalty & Engagement
  referralCode   String? @unique
  referredBy     String? // Another customer's referral code
  totalReferrals Int     @default(0)

  // Metadata
  lastOrderAt       DateTime?
  totalOrders       Int       @default(0)
  totalSpent        Decimal   @default(0) @db.Decimal(10, 2)
  averageOrderValue Decimal   @default(0) @db.Decimal(10, 2)
  tags              String[] // For segmentation

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  addresses        Address[]
  orders           Order[]
  reviews          Review[]
  sessions         Session[]
  productViews     ProductView[]
  checkoutSessions CheckoutSession[]
  loyaltyPoints    CustomerLoyalty[]
  notifications    Notification[]

  @@index([email])
  @@index([phone])
  @@index([referralCode])
}

model Address {
  id         String @id @default(cuid())
  customerId String

  label      String // Home, Office, etc.
  line1      String
  line2      String?
  postalCode String
  country    String  @default("SG")

  // Coordinates for delivery validation
  latitude  Float?
  longitude Float?

  // Delivery instructions
  deliveryInstructions String? // "Ring doorbell", "Leave with security"
  contactName          String? // Different recipient
  contactPhone         String?

  isDefault Boolean @default(false)
  isValid   Boolean @default(true) // Validated address

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders   Order[]

  @@index([customerId])
  @@index([postalCode])
}

model Order {
  id          String  @id @default(cuid())
  orderNumber String  @unique
  merchantId  String
  customerId  String?

  // Delivery Details
  deliveryMethod    DeliveryMethod
  deliveryAddressId String?
  deliveryFee       Decimal        @db.Decimal(10, 2)
  deliveryNotes     String?

  // Delivery Tracking
  deliveryPartner     String? // "Grab", "Lalamove", "Self", "Walker"
  deliveryTrackingId  String?
  deliveryTrackingUrl String?
  driverName          String?
  driverPhone         String?

  // Scheduling
  orderType      String    @default("immediate") // "immediate", "scheduled", "preorder"
  scheduledFor   DateTime? // For pre-orders
  estimatedReady DateTime?
  actualReadyAt  DateTime?

  // Pricing
  subtotal  Decimal @db.Decimal(10, 2)
  discount  Decimal @default(0) @db.Decimal(10, 2)
  tax       Decimal @default(0) @db.Decimal(10, 2)
  gstAmount Decimal @default(0) @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Platform Fees
  platformFee          Decimal @default(0) @db.Decimal(10, 2)
  paymentProcessingFee Decimal @default(0) @db.Decimal(10, 2)
  merchantPayout       Decimal @default(0) @db.Decimal(10, 2)

  // Status
  status        OrderStatus    @default(PENDING)
  paymentStatus PaymentStatus  @default(PENDING)
  paymentMethod PaymentMethod?

  // Payment Details
  paymentReference   String?
  paymentProof       String? // Screenshot URL for PayNow
  paymentConfirmedAt DateTime?
  paymentConfirmedBy String? // Manual confirmation by merchant

  // Customer Info (for guest checkout)
  customerName  String?
  customerPhone String?
  customerEmail String?

  // Rating & Feedback
  rating   Int? // 1-5
  feedback String?
  ratedAt  DateTime?

  // Source & Attribution
  source       String  @default("web") // web, whatsapp, instagram, phone
  referralCode String?
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?

  // Cancellation
  cancellationReason String?
  cancelledBy        String? // "customer", "merchant", "system"
  refundAmount       Decimal?  @db.Decimal(10, 2)
  refundedAt         DateTime?
  refundReference    String?

  // Metadata
  notes         String? // Internal merchant notes
  customerNotes String? // Special requests from customer
  kitchenNotes  String? // Notes for kitchen staff
  invoiceNumber String?
  invoiceUrl    String?
  metadata      Json? // Flexible data storage

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  preparedAt  DateTime?
  readyAt     DateTime?
  pickedUpAt  DateTime?
  deliveredAt DateTime?
  completedAt DateTime?
  cancelledAt DateTime?

  // Relations
  merchant        Merchant         @relation(fields: [merchantId], references: [id])
  customer        Customer?        @relation(fields: [customerId], references: [id])
  deliveryAddress Address?         @relation(fields: [deliveryAddressId], references: [id])
  items           OrderItem[]
  payment         Payment?
  events          OrderEvent[]
  promotions      OrderPromotion[]

  @@index([merchantId, status, createdAt])
  @@index([customerId, createdAt])
  @@index([orderNumber])
  @@index([createdAt])
  @@index([scheduledFor])
  @@index([paymentStatus])
  @@index([source])
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String

  // Product snapshot at time of order
  productName  String
  productSku   String?
  productPrice Decimal @db.Decimal(10, 2)
  productImage String?

  // Order details
  quantity Int
  price    Decimal @db.Decimal(10, 2) // Unit price after modifiers
  total    Decimal @db.Decimal(10, 2) // quantity * price

  // Variants/Options
  variant        Json? // Selected variant details
  modifiers      Json? // Additional modifications
  specialRequest String? // Customer notes for this item

  // Status
  isPrepared Boolean   @default(false)
  preparedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model OrderEvent {
  id        String   @id @default(cuid())
  orderId   String
  event     String // status_changed, payment_received, etc.
  data      Json // Event details
  createdBy String? // User ID or "system"
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId, createdAt])
}

model Payment {
  id       String        @id @default(cuid())
  orderId  String        @unique
  amount   Decimal       @db.Decimal(10, 2)
  currency String        @default("SGD")
  method   PaymentMethod
  status   PaymentStatus

  // Payment Gateway Details
  gatewayProvider String? // "stripe", "paynow", "manual"
  transactionId   String? @unique
  referenceNumber String?

  // Fee Breakdown
  gatewayFee Decimal? @db.Decimal(10, 2)
  netAmount  Decimal? @db.Decimal(10, 2)

  // Metadata
  metadata      Json?
  failureReason String?
  attemptCount  Int     @default(1)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  processedAt DateTime?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([status])
}

model CheckoutSession {
  id         String @id @default(cuid())
  sessionId  String @unique
  merchantId String

  // Cart contents
  items           Json // Product details, quantities, prices
  deliveryAddress Json?
  contactInfo     Json?

  // Pricing
  subtotal    Decimal? @db.Decimal(10, 2)
  deliveryFee Decimal? @db.Decimal(10, 2)
  discount    Decimal? @db.Decimal(10, 2)
  total       Decimal? @db.Decimal(10, 2)

  // Applied promotions
  promotionCodes String[]

  // Payment
  paymentMethod    PaymentMethod?
  paymentReference String?        @unique

  // Session management
  ipAddress  String?
  userAgent  String?
  customerId String?
  source     String  @default("web")

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  merchant Merchant  @relation(fields: [merchantId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])

  @@index([sessionId])
  @@index([expiresAt])
  @@index([paymentReference])
}

model Review {
  id         String  @id @default(cuid())
  merchantId String
  customerId String
  productId  String?
  orderId    String?

  rating  Int // 1-5
  title   String?
  comment String?
  images  String[] @default([])

  // Review aspects
  foodQuality Int? // 1-5
  delivery    Int? // 1-5
  value       Int? // 1-5
  packaging   Int? // 1-5

  // Merchant response
  response    String?
  respondedAt DateTime?
  responseBy  String? // Merchant user ID

  isVerified Boolean @default(false) // Verified purchase
  isVisible  Boolean @default(true)
  isFeatured Boolean @default(false)

  // Moderation
  flagged     Boolean   @default(false)
  flagReason  String?
  moderatedAt DateTime?
  moderatedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  merchant Merchant @relation(fields: [merchantId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])
  product  Product? @relation(fields: [productId], references: [id])

  @@index([merchantId, rating])
  @@index([customerId])
  @@index([productId])
  @@index([isVisible, rating])
}

model Session {
  id    String @id @default(cuid())
  token String @unique

  // User association (either merchant or customer)
  merchantId String?
  customerId String?

  // Session data
  ipAddress  String?
  userAgent  String?
  deviceType String? // mobile, tablet, desktop

  // Location
  country String?
  city    String?

  lastActivityAt DateTime @default(now())
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  merchant Merchant? @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([merchantId])
  @@index([customerId])
  @@index([expiresAt])
}

model Analytics {
  id         String @id @default(cuid())
  merchantId String

  event      String // page_view, product_view, order_placed, etc.
  category   String? // "engagement", "conversion", "revenue"
  properties Json // Event-specific properties

  // Context
  sessionId  String?
  customerId String?
  orderId    String?
  productId  String?

  // Source
  ipAddress String?
  userAgent String?
  referrer  String?
  utmSource String?
  utmMedium String?

  // Metrics
  value    Decimal? @db.Decimal(10, 2) // For revenue events
  duration Int? // For time-based events (seconds)

  createdAt DateTime @default(now())

  // Relations
  merchant Merchant @relation(fields: [merchantId], references: [id])

  @@index([merchantId, event, createdAt])
  @@index([category, createdAt])
  @@index([customerId])
  @@index([sessionId])
}

model Notification {
  id         String  @id @default(cuid())
  merchantId String?
  customerId String?

  type    NotificationType
  title   String
  message String
  data    Json? // Additional data like orderId, etc.

  // Delivery
  channels String[] @default(["in_app"]) // in_app, email, sms, whatsapp

  // Priority
  priority NotificationPriority @default(NORMAL) // low, normal, high, urgent

  // Status
  read      Boolean   @default(false)
  readAt    DateTime?
  delivered Boolean   @default(false)

  // Action
  actionUrl   String? // Link to relevant page
  actionLabel String? // "View Order"

  createdAt DateTime  @default(now())
  expiresAt DateTime? // Auto-delete after this

  // Relations
  merchant Merchant? @relation(fields: [merchantId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([merchantId, read, createdAt])
  @@index([customerId, read, createdAt])
  @@index([type, createdAt])
  @@index([expiresAt])
}

// ==================== PLATFORM FEATURES ====================

model Subscription {
  id         String @id @default(cuid())
  merchantId String @unique

  tier               SubscriptionTier
  status             SubscriptionStatus @default(TRIAL)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime

  // Usage tracking
  ordersThisMonth  Int     @default(0)
  revenueThisMonth Decimal @default(0) @db.Decimal(10, 2)

  // Billing
  billingCycle String  @default("monthly") // monthly, yearly
  amount       Decimal @db.Decimal(10, 2)
  currency     String  @default("SGD")

  // Payment
  lastPaymentDate   DateTime?
  lastPaymentAmount Decimal?  @db.Decimal(10, 2)
  nextPaymentDate   DateTime?
  paymentMethod     String?

  // Trial
  trialStart DateTime?
  trialEnd   DateTime?

  // Cancellation
  cancelledAt        DateTime?
  cancellationReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchant Merchant @relation(fields: [merchantId], references: [id])

  @@index([status])
  @@index([tier])
}

model InventoryLog {
  id        String @id @default(cuid())
  productId String

  type      InventoryLogType
  quantity  Int // positive for additions, negative for subtractions
  reason    String?
  reference String? // Order ID, etc.

  previousStock Int
  newStock      Int

  cost Decimal? @db.Decimal(10, 2) // For COGS tracking

  createdAt DateTime @default(now())
  createdBy String? // User ID or "system"

  product Product @relation(fields: [productId], references: [id])

  @@index([productId, createdAt])
  @@index([type])
}

model Promotion {
  id         String @id @default(cuid())
  merchantId String

  code        String        @unique
  name        String
  description String
  type        PromotionType
  value       Decimal       @db.Decimal(10, 2)

  // Display
  imageUrl    String?
  highlighted Boolean @default(false)

  // Conditions
  minimumOrder   Decimal? @db.Decimal(10, 2)
  maxDiscount    Decimal? @db.Decimal(10, 2)
  usageLimit     Int? // Total uses allowed
  usageCount     Int      @default(0)
  customerLimit  Int      @default(1) // Uses per customer
  firstOrderOnly Boolean  @default(false)

  // Applicable to
  applicableProducts   String[] // Product IDs
  applicableCategories String[] // Category IDs
  excludedProducts     String[] // Product IDs to exclude

  // Schedule
  validFrom  DateTime
  validTo    DateTime
  validDays  Int[]    @default([0, 1, 2, 3, 4, 5, 6]) // Days of week
  validHours Json? // { "start": "10:00", "end": "14:00" }

  isActive Boolean @default(true)
  isPublic Boolean @default(true) // Visible to customers

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchant Merchant         @relation(fields: [merchantId], references: [id])
  orders   OrderPromotion[]

  @@index([merchantId, isActive])
  @@index([code])
  @@index([validFrom, validTo])
}

model OrderPromotion {
  orderId     String
  promotionId String

  discountAmount Decimal @db.Decimal(10, 2)

  appliedAt DateTime @default(now())

  order     Order     @relation(fields: [orderId], references: [id])
  promotion Promotion @relation(fields: [promotionId], references: [id])

  @@id([orderId, promotionId])
}

model WhatsAppTemplate {
  id         String @id @default(cuid())
  merchantId String

  name     String
  type     String // order_confirmation, order_ready, etc.
  language String @default("en")
  template String // Template with {{variables}}

  // WhatsApp Business API
  wabaTemplateId   String?
  wabaTemplateName String?
  status           String  @default("pending") // pending, approved, rejected

  isActive  Boolean @default(true)
  isDefault Boolean @default(false)

  lastUsedAt DateTime?
  usageCount Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchant Merchant @relation(fields: [merchantId], references: [id])

  @@unique([merchantId, type, language])
  @@index([type])
}

model LoyaltyProgram {
  id         String @id @default(cuid())
  merchantId String @unique

  name        String
  description String?

  // Earning
  pointsPerDollar Decimal @default(1) @db.Decimal(5, 2)
  bonusPoints     Json? // Special rules for bonus points

  // Redemption
  redeemRate      Decimal  @db.Decimal(5, 2) // Points per $1 discount
  minimumRedeem   Int      @default(100) // Minimum points to redeem
  maximumDiscount Decimal? @db.Decimal(5, 2) // Max discount percentage

  // Tiers
  tiers Json? // Bronze, Silver, Gold with benefits

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchant       Merchant          @relation(fields: [merchantId], references: [id])
  customerPoints CustomerLoyalty[]
}

model CustomerLoyalty {
  customerId String
  merchantId String

  points         Int     @default(0)
  lifetimePoints Int     @default(0)
  tier           String  @default("Bronze")
  tierProgress   Decimal @default(0) @db.Decimal(5, 2) // % to next tier

  // Stats
  totalRedeemed  Int       @default(0)
  lastEarnedAt   DateTime?
  lastRedeemedAt DateTime?

  // Expiry
  pointsExpiry DateTime? // Points expire after X months

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer       @relation(fields: [customerId], references: [id])
  merchant Merchant       @relation(fields: [merchantId], references: [id], map: "CustomerLoyalty_merchant_fkey")
  program  LoyaltyProgram @relation(fields: [merchantId], references: [merchantId], map: "CustomerLoyalty_program_fkey")

  @@id([customerId, merchantId])
  @@index([merchantId])
  @@index([points])
}

model AuditLog {
  id String @id @default(cuid())

  entityType String // "Order", "Product", "Merchant", etc.
  entityId   String
  action     AuditAction

  // Changes
  oldValues Json?
  newValues Json?
  changes   Json? // Specific fields that changed

  // Context
  userId    String?
  userType  String? // "merchant", "customer", "admin", "system"
  userName  String?
  ipAddress String?
  userAgent String?

  // Additional info
  reason   String? // For manual actions
  metadata Json?

  createdAt DateTime @default(now())

  // Relations
  merchant Merchant? @relation(fields: [userId], references: [id])

  @@index([entityType, entityId, createdAt])
  @@index([userId, createdAt])
  @@index([action])
}
